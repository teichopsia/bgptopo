#!/usr/bin/env python3

import sys
import os
import itertools
import collections
from PIL import Image
import pydot
import io
import libsixel
import curses
import os
import functools

class Model(object):
	def segment(k):
		a,b=itertools.tee(k)
		next(b,None)
		return zip(a,b)
	def cursorup(self):
		m=len(self.cursormap)
		self.cursor+=m-1
		self.cursor%=m
	def cursordown(self):
		m=len(self.cursormap)
		self.cursor+=m+1
		self.cursor%=m
	def select(self,n):
		self.cursor=n
		return self.selected()
	def selected(self):
		return self.model.get(self.cursormap[self.cursor])
	def __init__(self,f):
		def emit(t,p,o):
			''' t=<block>, p=peerdict, o=origin-as '''
			pl=''
			for asn in p:
				pl+='	{}--{};\n'.format('local',asn)
			return '''graph bgp {{
	graph [bgcolor=black,size="8!"];
	node [shape=Mrecord,bgcolor=black,
	fontcolor=yellow,color=cyan,
	fontsize=14,fontname="Times-Roman",label="\\N"];
	edge [color=yellow];
{}	{} [color=red,penwidth=3];{}}}'''.format(t,o,pl)
		self.model={}
		with open(f,'rt') as t:
			offset=-1
			net=path=None
			reach=collections.defaultdict(dict)
			peer={}
			for line in t:
				line=line.rstrip()
				if offset>0:
					path=line[offset:]
				else:
					offset=line.find('Path')
				pn=line[5:17+5]
				if '/' in pn:
					if net:
						insert=''
						#reduce adjacency nested dict to row echelon form
						#this prevents duplicate edges for both directions
						for (x,y,w) in [(x,y,reach[x][y]) for x in reach for y in reach[x] if x>y]:
							insert+='	{}--{}[penwidth={}];\n'.format(x,y,w)
						self.model[net]={'dot':emit(insert,peer,path.split(' ')[-2])}
					net=pn.rstrip()
					peer={}
				if all([net,path]):
					for (a,b) in Model.segment(path.split(' ')[0:-1]):
						reach[a].setdefault(b,0)
						reach[b].setdefault(a,0)
						reach[a][b]+=1
						reach[b][a]+=1
					peer[path.split(' ')[0]]=True
		self.cursormap={x:y for x,y in enumerate(self.model.keys())}
		self.cursor=1

	def render(self):
		ff=self.selected()
		if 'out' not in ff:
			g=pydot.graph_from_dot_data(ff['dot'])
			png=g[0].create_png()
			g[0].write_dot('prep')
			z=io.BytesIO(png)
			s=io.BytesIO()
			img=Image.open(z)

			data=img.tobytes()
			output=libsixel.sixel_output_new(lambda data,s:s.write(data),s)
			dither=libsixel.sixel_dither_new(256)
			libsixel.sixel_dither_initialize(dither,data,img.width,img.height,libsixel.SIXEL_PIXELFORMAT_RGBA8888)
			libsixel.sixel_encode(data,img.width,img.height,1,dither,output)

			ff.update({'out':s.getvalue().decode('ascii'),'w':img.width,'h':img.height})
			Model.sequence(ff['dot'])
			libsixel.sixel_dither_unref(dither)
			libsixel.sixel_output_unref(output)

	@staticmethod
	def sequence(dot):
		with open('selected','wt') as t:
			t.write(dot)

def cursemain(context,display):
	my,mx=display.getmaxyx()
	full=curses.newwin(my,mx)
	leftw=21
	prefixlist=curses.newwin(my,leftw,0,0)
	prefixlist.keypad(True)
	prefixlist.box()
	curses.curs_set(0)
	#display.clear()
	def redraw():
		for ln in context.cursormap:
			pf=context.cursormap[ln]
			prefixlist.addstr(ln+1,1,'{} {}'.format('>' if ln==context.cursor else ' ',pf))
		full.move(1,leftw)
		full.refresh()
		context.render()
		print(context.selected()['out'])
		prefixlist.addstr(21,1,'{}'.format(context.cursor))
		prefixlist.addstr(22,1,'{}'.format(len(context.cursormap)))
		prefixlist.refresh()
	try:
		redraw()
		while True:
			try:
				k=prefixlist.getch()
			except KeyboardInterrupt:
				pass
			else:
				if k==27:
					break
				elif k==ord('j'):
					context.cursordown()
					redraw()
				elif k==ord('k'):
					context.cursorup()
					redraw()
	except KeyboardInterrupt:
		pass
	finally:
		curses.curs_set(1)
		prefixlist.keypad(False)
		#display.clear()

class kex(object):
	''' recursive flush/close stdout/stderr '''
	def __call__(self,e,r):
		try:
			return e[0]()
		except (IOError,BrokenPipeError,KeyboardInterrupt) as x:
			self(e[1:],r+1)
		return r

def main(s):
	if os.geteuid()==os.getuid() and os.getuid():
		os.environ.setdefault('ESCDELAY','10')
		if len(sys.argv)>1:
			pfmap=Model(s[1])
			curses.wrapper(functools.partial(cursemain,pfmap))
	else:
		print('stop running as root/suid',file=sys.stderr)
		return 1

if __name__=='__main__':
	sys.exit(kex()([
		lambda :main(sys.argv),
		sys.stdout.flush,
		sys.stdout.close,
		sys.stderr.flush,
		sys.stderr.close],1))
